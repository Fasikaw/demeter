# configuration specification

[STRUCTURE]
root_dir =                      string(default=None)
in_dir =                        string(default=None)
out_dir =                       string(default=None)

[INPUTS]
allocation_dir =                string(default=allocation)
observed_dir =                  string(default=observed)
constraints_dir =               string(default=constraints)
projected_dir =                 string(default=projected)
ref_dir =                       string(default=reference)

[[ALLOCATION]]
spatial_allocation =            string(default=spatial_allocation.csv)
gcam_allocation =               string(default=gcam_allocation.csv)
kernel_allocation =             string(default=kernel_density_weighting.csv)
transition_order =              string(default=transition_priority.csv)
treatment_order =               string(default=treatment_order.csv)
constraints =                   string(default=onstraint_weighting.csv)

[[OBSERVED]]
observed_lu_data =              string(default=modis_2005_lc_monfreda_0p25deg_reg32aez.csv)

[[PROJECTED]]
projected_lu_data =             string(default=gcam_ref_scenario_reg32aez.csv)

[[REFERENCE]]
gcam_regnamefile =              string(default=gcam_regions_32.csv)
region_coords =                 string(default=regioncoord.csv)
country_coords =                string(default=countrycoord.csv)

[OUTPUTS]
diag_dir =                      string(default=None)
log_dir =                       string(default=None)
kernel_map_dir =                string(default=None)
transition_tabular =            string(default=None)
transition_maps =               string(default=None)
luc_intense_p1_dir =            string(default=None)
luc_intense_p2_dir =            string(default=None)
luc_expand_dir =                string(default=None)
luc_timestep =                  string(default=None)
lc_per_step_csv =               string(default=None)
lc_per_step_nc =                string(default=None)
lc_per_step_shp =               string(default=None)

[[DIAGNOSTICS]]
harm_coeff =                    string(default=harmonization_coeff.npy)
intense_pass1_diag =            string(default=intensification_pass_one_diag.csv)
intense_pass2_diag =            string(default=intensification_pass_two_diag.csv)
expansion_diag =                string(default=expansion_diag.csv)

[PARAMS]
# projection model name
model =                         string(max=50, default=GCAM)

# projection model metric, currently AEZ or BASIN
metric =                        options(AEZ, BASIN, default=AEZ)

# scenario name
scenario =                      string(max=50, default=example)

# run description
run_desc =                      string(max=50, default=demeter_example)

# aggregate level; 1 if there is no region information in the file, 2 if by both region and AEZ (Default)
agg_level =                     integer(1, 2, default=2)

# spatial base layer id field name
observed_id_field =             string(default=fid)

# first year to process
start_year =                    integer(default=2005)

# last year to process
end_year =                      integer(default=2015)

# enter 1 to use non-kernel density constraints, 0 to ignore non-kernel density constraints
use_constraints =               integer(0, 1, default=1)

# the spatial resolution of the base lulc layer in decimal degrees
spatial_resolution =            float(default=0.25)

# error tolerance in km2 for PFT area change not completed
errortol =                     float(default=0.001)

# time step in years
timestep =                      integer(default=1)

# factor to multiply the projected land allocation by
proj_factor =                   integer(default=1000)

# output diagnostic reports
diagnostic =                    integer(0, 1, default=0)

# from 0 to 1; ideal fraction of LUC that will occur during intensification, the remainder will be expansion
intensification_ratio =         float(min=0.0, max=1.0, default=0.8)

# activates the stochastic selection of grid cells for expansion of any PFT
stochastic_expansion =          integer(0, 1, default=0)

# threshold above which grid cells are selected to receive a given land type expansion; between 0 and 1, where 0 is all
#     land cells can receive expansion and set to 1 only the grid cell with the maximum likelihood will expand.  For
#     a 0.75 setting, only grid cells with a likelihood >= 0.75 x max_likelihood are selected.
selection_threshold =           float(0.0, 1.0, default=0.75)

# radius in grid cells to use when computing the kernel density; larger is smoother but will increase run-time
kernel_distance =               integer(min=0, default=10)

# create kernel density maps; 1 is True
map_kernels =                   integer(0, 1, default=0)

# create land change maps per time step per land class
map_luc_pft =                   integer(0, 1, default=0)

# create land change maps for each intensification and expansion step
map_luc_steps =                 integer(0, 1, default=0)

# creates maps of land transitions for each time step
map_transitions =               integer(0, 1, default=0)

# years to save data for, default is 'all'; otherwise a semicolon delimited string e.g, 2005;2050
target_years_output =           string(default=all)

# save tabular spatial landcover as CSV; define tabular_units below (default sqkm)
save_tabular =                  integer(0, 1, default=1)

# units to output tabular data in (sqkm or fraction)
tabular_units =                 options(sqkm, fraction, default=sqkm)

# exports CSV files of land transitions for each time step in km2
save_transitions =              integer(0, 1, default=0)

# create land cover per point shapefile output for each time step; output units will be same as tabular data
save_shapefile =                integer(0, 1, default=0)

# create a NetCDF file for each year of the fraction of land cover of each land class
save_netcdf_yr =                integer(0, 1, default=0)

# create a NetCDF file for each land class of the fraction of land cover it takes up over all years
save_netcdf_lc =                integer(0, 1, default=0)

# create an ASCII raster representing the land class with the maximum value per grid cell per year
save_ascii_max =                integer(0, 1, default=0)
